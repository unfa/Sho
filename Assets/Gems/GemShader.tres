[gd_resource type="VisualShader" load_steps=19 format=2]

[ext_resource path="res://Assets/Materials/NoisyMaterials/GrayscaleNoise.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 6, 6, 6 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=8]

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 1.0

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=11]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.4, 0.4, 0.4 ) ]

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "view"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "tangent"

[sub_resource type="VisualShaderNodeVectorOp" id=17]
operator = 8

[resource]
code = "shader_type spatial;
uniform vec4 Color : hint_color;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = Color.rgb;
	float n_out3p1 = Color.a;

// Input:12
	float n_out12p0 = TIME;

// ScalarOp:16
	float n_in16p1 = 4.00000;
	float n_out16p0 = n_out12p0 * n_in16p1;

// Input:7
	vec3 n_out7p0 = VIEW;

// VectorOp:10
	vec3 n_in10p1 = vec3(6.00000, 6.00000, 6.00000);
	vec3 n_out10p0 = n_out7p0 / n_in10p1;

// Input:8
	vec3 n_out8p0 = TANGENT;

// VectorOp:9
	vec3 n_out9p0 = cross(n_out10p0, n_out8p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out9p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:13
	float n_out13p0 = n_out16p0 * dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarFunc:14
	float n_out14p0 = sin(n_out13p0);

// ScalarOp:15
	float n_in15p1 = 1.00000;
	float n_out15p0 = n_out14p0 + n_in15p1;

// VectorOp:5
	vec3 n_in5p1 = vec3(0.30000, 0.30000, 0.30000);
	vec3 n_out5p0 = vec3(n_out15p0) * n_in5p1;

// VectorOp:6
	vec3 n_in6p1 = vec3(0.40000, 0.40000, 0.40000);
	vec3 n_out6p0 = n_out5p0 + n_in6p1;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * n_out6p0;

// Scalar:18
	float n_out18p0 = 1.000000;

// Scalar:17
	float n_out17p0 = 0.000000;

// VectorOp:11
	vec3 n_in11p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out11p0 = n_out4p0 * n_in11p1;

// Output:0
	ALBEDO = n_out4p0;
	METALLIC = n_out18p0;
	ROUGHNESS = n_out17p0;
	EMISSION = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 1472.75, 13.5 )
nodes/fragment/0/position = Vector2( 1720, 80 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -680, 200 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( 580, 120 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( 920, 140 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( 280, 220 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( 520, 360 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( -1500, 160 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( -1620, 320 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( -960, 280 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1200, 200 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 1140, 400 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -820, 0 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -420, 180 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -200, 140 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 40, 200.75 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -580, 40 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 1100, 80 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 1100, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 0, 0, 5, 0, 6, 0, 6, 0, 4, 1, 9, 0, 2, 0, 8, 0, 9, 1, 7, 0, 10, 0, 10, 0, 9, 0, 4, 0, 11, 0, 11, 0, 0, 5, 2, 0, 13, 1, 13, 0, 14, 0, 14, 0, 15, 0, 15, 0, 5, 0, 12, 0, 16, 0, 16, 0, 13, 0, 17, 0, 0, 3, 18, 0, 0, 2 )
