[gd_resource type="ShaderMaterial" load_steps=33 format=2]

[sub_resource type="OpenSimplexNoise" id=1]
octaves = 6
lacunarity = 2.96

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
texture = SubResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.01 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeFresnel" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, false, 3, 2.0 ]

[sub_resource type="Gradient" id=10]
offsets = PoolRealArray( 0, 0.648544, 0.873786 )
colors = PoolColorArray( 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=11]
gradient = SubResource( 10 )
width = 128

[sub_resource type="VisualShaderNodeTexture" id=12]
output_port_for_preview = 0
texture = SubResource( 11 )

[sub_resource type="VisualShaderNodeScalarFunc" id=13]
function = 11

[sub_resource type="VisualShaderNodeScalarConstant" id=14]
constant = 0.01

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 1.0

[sub_resource type="VisualShaderNodeTexture" id=19]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=21]
operator = 10

[sub_resource type="VisualShaderNodeVectorOp" id=22]
operator = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=23]
constant = 0.25

[sub_resource type="VisualShaderNodeVectorOp" id=24]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeFresnel" id=25]
default_input_values = [ 2, false, 3, 0.25 ]

[sub_resource type="VisualShaderNodeVectorOp" id=35]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=36]
function = 12

[sub_resource type="VisualShaderNodeColorUniform" id=37]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeVectorOp" id=38]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=39]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=40]
constant = 48.0

[sub_resource type="VisualShaderNodeScalarOp" id=41]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=42]
uniform_name = "FresnelPower"

[sub_resource type="VisualShaderNodeInput" id=43]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShader" id=44]
code = "shader_type spatial;
render_mode cull_front, specular_disabled, unshaded, ensure_correct_normals, shadows_disabled;

uniform sampler2D tex_frg_12 : hint_albedo;
uniform vec4 Color : hint_color;
uniform float FresnelPower;
uniform sampler2D tex_frg_23;



void vertex() {
// Output:0

}

void fragment() {
// Input:14
	vec3 n_out14p0 = vec3(UV, 0.0);

// Input:16
	float n_out16p0 = TIME;

// ScalarOp:18
	float n_in18p1 = 0.01000;
	float n_out18p0 = n_out16p0 * n_in18p1;

// VectorOp:17
	vec3 n_out17p0 = n_out14p0 + vec3(n_out18p0);

// Texture:12
	vec4 tex_frg_12_read = texture(tex_frg_12, n_out17p0.xy);
	vec3 n_out12p0 = tex_frg_12_read.rgb;
	float n_out12p1 = tex_frg_12_read.a;

// Scalar:36
	float n_out36p0 = 0.250000;

// VectorOp:35
	vec3 n_out35p0 = n_out12p0 - vec3(n_out36p0);

// Fresnel:38
	bool n_in38p2 = false;
	float n_in38p3 = 0.25000;
	float n_out38p0 = n_in38p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in38p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in38p3));

// VectorOp:19
	vec3 n_out19p0 = n_out35p0 * vec3(n_out38p0);

// VectorOp:34
	vec3 n_in34p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out34p0 = reflect(n_in34p0, n_out19p0);

// Texture:31
	vec3 n_out31p0;
	float n_out31p1;
	{
		vec4 _tex_read = vec4(0.0);
	}

// ColorUniform:5
	vec3 n_out5p0 = Color.rgb;
	float n_out5p1 = Color.a;

// ScalarFunc:49
	float n_out49p0 = abs(dot(n_out19p0, vec3(0.333333, 0.333333, 0.333333)));

// VectorOp:48
	vec3 n_out48p0 = n_out5p0 * vec3(n_out49p0);

// ScalarUniform:7
	float n_out7p0 = FresnelPower;

// Fresnel:2
	vec3 n_in2p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	bool n_in2p2 = false;
	float n_out2p0 = n_in2p2 ? (pow(clamp(dot(n_in2p0, n_in2p1), 0.0, 1.0), n_out7p0)) : (pow(1.0 - clamp(dot(n_in2p0, n_in2p1), 0.0, 1.0), n_out7p0));

// ScalarFunc:24
	float n_out24p0 = sqrt(n_out2p0);

// Texture:23
	vec4 tex_frg_23_read = texture(tex_frg_23, vec3(n_out24p0).xy);
	vec3 n_out23p0 = tex_frg_23_read.rgb;
	float n_out23p1 = tex_frg_23_read.a;

// ScalarOp:6
	float n_out6p0 = n_out5p1 * dot(n_out23p0, vec3(0.333333, 0.333333, 0.333333));

// VectorOp:50
	vec3 n_out50p0 = n_out48p0 * vec3(n_out6p0);

// Scalar:52
	float n_out52p0 = 48.000000;

// VectorOp:51
	vec3 n_out51p0 = n_out50p0 * vec3(n_out52p0);

// VectorOp:37
	vec3 n_out37p0 = n_out31p0 + n_out51p0;

// Scalar:27
	float n_out27p0 = 1.000000;

// Scalar:25
	float n_out25p0 = 0.010000;

// Scalar:26
	float n_out26p0 = 1.000000;

// Output:0
	ALBEDO = n_out37p0;
	METALLIC = n_out27p0;
	ROUGHNESS = n_out25p0;
	SPECULAR = n_out26p0;
	EMISSION = n_out51p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 1018, -634 )
modes/cull = 1
modes/specular = 4
flags/ensure_correct_normals = true
flags/shadows_disabled = true
flags/unshaded = true
nodes/fragment/0/position = Vector2( 1780, -280 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -420, 280 )
nodes/fragment/5/node = SubResource( 37 )
nodes/fragment/5/position = Vector2( 160, -60 )
nodes/fragment/6/node = SubResource( 41 )
nodes/fragment/6/position = Vector2( 560, 20 )
nodes/fragment/7/node = SubResource( 42 )
nodes/fragment/7/position = Vector2( -660, 360 )
nodes/fragment/9/node = SubResource( 43 )
nodes/fragment/9/position = Vector2( -80, -320 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -280, -700 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -780, -600 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( -960, -460 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -500, -560 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -720, -500 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( 220, -580 )
nodes/fragment/23/node = SubResource( 12 )
nodes/fragment/23/position = Vector2( 160, 300 )
nodes/fragment/24/node = SubResource( 13 )
nodes/fragment/24/position = Vector2( -60, 340 )
nodes/fragment/25/node = SubResource( 14 )
nodes/fragment/25/position = Vector2( 1180, -40 )
nodes/fragment/26/node = SubResource( 15 )
nodes/fragment/26/position = Vector2( 880, 200 )
nodes/fragment/27/node = SubResource( 16 )
nodes/fragment/27/position = Vector2( 860, 100 )
nodes/fragment/31/node = SubResource( 19 )
nodes/fragment/31/position = Vector2( 900, -340 )
nodes/fragment/34/node = SubResource( 21 )
nodes/fragment/34/position = Vector2( 520, -400 )
nodes/fragment/35/node = SubResource( 22 )
nodes/fragment/35/position = Vector2( 20, -600 )
nodes/fragment/36/node = SubResource( 23 )
nodes/fragment/36/position = Vector2( -220, -780 )
nodes/fragment/37/node = SubResource( 24 )
nodes/fragment/37/position = Vector2( 1260, -320 )
nodes/fragment/38/node = SubResource( 25 )
nodes/fragment/38/position = Vector2( 0, -920 )
nodes/fragment/48/node = SubResource( 35 )
nodes/fragment/48/position = Vector2( 520, -120 )
nodes/fragment/49/node = SubResource( 36 )
nodes/fragment/49/position = Vector2( 280, -160 )
nodes/fragment/50/node = SubResource( 38 )
nodes/fragment/50/position = Vector2( 840, -140 )
nodes/fragment/51/node = SubResource( 39 )
nodes/fragment/51/position = Vector2( 1060, -160 )
nodes/fragment/52/node = SubResource( 40 )
nodes/fragment/52/position = Vector2( 940, -20 )
nodes/fragment/connections = PoolIntArray( 5, 1, 6, 0, 7, 0, 2, 3, 18, 0, 17, 1, 23, 0, 6, 1, 2, 0, 24, 0, 24, 0, 23, 0, 34, 0, 31, 0, 35, 0, 19, 0, 36, 0, 35, 1, 31, 0, 37, 0, 5, 0, 48, 0, 19, 0, 49, 0, 49, 0, 48, 1, 48, 0, 50, 0, 6, 0, 50, 1, 50, 0, 51, 0, 51, 0, 37, 1, 52, 0, 51, 1, 25, 0, 0, 3, 26, 0, 0, 4, 27, 0, 0, 2, 14, 0, 17, 0, 16, 0, 18, 0, 17, 0, 12, 0, 19, 0, 34, 1, 38, 0, 19, 1, 12, 0, 35, 0, 51, 0, 0, 5, 37, 0, 0, 0 )

[resource]
shader = SubResource( 44 )
shader_param/Color = Color( 0.447059, 0.611765, 0.176471, 1 )
shader_param/FresnelPower = 4.0
