[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeFresnel" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "view"

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "FresnelPower"

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
render_mode blend_add, unshaded;

uniform vec4 Color : hint_color;
uniform float FresnelPower;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	n_out5p0 = Color.rgb;
	n_out5p1 = Color.a;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = NORMAL;

// Input:4
	vec3 n_out4p0;
	n_out4p0 = VIEW;

// ScalarUniform:7
	float n_out7p0;
	n_out7p0 = FresnelPower;

// Fresnel:2
	bool n_in2p2 = false;
	float n_out2p0;
	n_out2p0 = n_in2p2 ? (pow(clamp(dot(n_out3p0, n_out4p0), 0.0, 1.0), n_out7p0)) : (pow(1.0 - clamp(dot(n_out3p0, n_out4p0), 0.0, 1.0), n_out7p0));
// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out5p1 * n_out2p0;

// Output:0
	ALBEDO = n_out5p0;
	ALPHA = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 11, -230 )
modes/blend = 1
flags/unshaded = true
nodes/fragment/0/position = Vector2( 860, 60 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 300, 220 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 20, 200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 40, 260 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 280, -20 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 600, 120 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 0, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 0, 0, 2, 0, 6, 1, 5, 1, 6, 0, 6, 0, 0, 1, 7, 0, 2, 3 )

[resource]
shader = SubResource( 5 )
shader_param/Color = Color( 0.341176, 0.568627, 0.996078, 1 )
shader_param/FresnelPower = 4.0
