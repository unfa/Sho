[gd_resource type="ShaderMaterial" load_steps=29 format=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 1
texture_type = 1

[sub_resource type="OpenSimplexNoise" id=2]
octaves = 6
lacunarity = 2.96

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
texture = SubResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.01 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeFresnel" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Distortion"

[sub_resource type="VisualShaderNodeVectorOp" id=13]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( -0.5, -0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=14]

[sub_resource type="Gradient" id=15]
offsets = PoolRealArray( 0, 0.648544, 0.873786 )
colors = PoolColorArray( 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=16]
gradient = SubResource( 15 )
width = 128

[sub_resource type="VisualShaderNodeTexture" id=17]
output_port_for_preview = 0
texture = SubResource( 16 )

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 11

[sub_resource type="VisualShaderNodeScalarConstant" id=19]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=20]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=21]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "view"

[sub_resource type="VisualShaderNodeColorUniform" id=24]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarOp" id=25]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=26]
uniform_name = "FresnelPower"

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "screen_uv"

[sub_resource type="VisualShader" id=28]
code = "shader_type spatial;
render_mode unshaded, shadows_disabled;

uniform sampler2D tex_frg_12 : hint_albedo;uniform float Distortion;
uniform vec4 Color : hint_color;
uniform float FresnelPower;
uniform sampler2D tex_frg_23;


void vertex() {
// Output:0

}

void fragment() {
// Input:9
	vec3 n_out9p0;
	n_out9p0 = vec3(SCREEN_UV,0.0);

// Input:14
	vec3 n_out14p0;
	n_out14p0 = vec3(UV,0.0);

// Input:16
	float n_out16p0;
	n_out16p0 = TIME;

// ScalarOp:18
	float n_in18p1 = 0.01000;
	float n_out18p0;
	n_out18p0 = n_out16p0 * n_in18p1;

// VectorOp:17
	vec3 n_out17p0;
	n_out17p0 = n_out14p0 + vec3(n_out18p0);

// Texture:12
	vec3 n_out12p0;
	float n_out12p1;
	vec4 tex_frg_12_read = texture( tex_frg_12 , n_out17p0.xy );
	n_out12p0 = tex_frg_12_read.rgb;
	n_out12p1 = tex_frg_12_read.a;

// VectorOp:21
	vec3 n_in21p1 = vec3(-0.50000,-0.50000,0.00000);
	vec3 n_out21p0;
	n_out21p0 = n_out12p0 - n_in21p1;

// ScalarUniform:20
	float n_out20p0;
	n_out20p0 = Distortion;

// VectorOp:19
	vec3 n_out19p0;
	n_out19p0 = n_out21p0 * vec3(n_out20p0);

// VectorOp:15
	vec3 n_out15p0;
	n_out15p0 = n_out9p0 + n_out19p0;

// Texture:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out15p0.xy , 0.0 );
		n_out11p0 = _tex_read.rgb;
		n_out11p1 = _tex_read.a;
	}

// ColorUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	n_out5p0 = Color.rgb;
	n_out5p1 = Color.a;

// VectorOp:22
	vec3 n_out22p0;
	n_out22p0 = n_out11p0 + n_out5p0;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = NORMAL;

// Input:4
	vec3 n_out4p0;
	n_out4p0 = VIEW;

// ScalarUniform:7
	float n_out7p0;
	n_out7p0 = FresnelPower;

// Fresnel:2
	bool n_in2p2 = false;
	float n_out2p0;
	n_out2p0 = n_in2p2 ? (pow(clamp(dot(n_out3p0, n_out4p0), 0.0, 1.0), n_out7p0)) : (pow(1.0 - clamp(dot(n_out3p0, n_out4p0), 0.0, 1.0), n_out7p0));
// ScalarFunc:24
	float n_out24p0;
	n_out24p0 = sqrt(n_out2p0);

// Texture:23
	vec3 n_out23p0;
	float n_out23p1;
	vec4 tex_frg_23_read = texture( tex_frg_23 , vec3(n_out24p0).xy );
	n_out23p0 = tex_frg_23_read.rgb;
	n_out23p1 = tex_frg_23_read.a;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out5p1 * dot(n_out23p0,vec3(0.333333,0.333333,0.333333));

// Scalar:27
	float n_out27p0;
	n_out27p0 = 1.000000;

// Scalar:25
	float n_out25p0;
	n_out25p0 = 0.100000;

// Scalar:26
	float n_out26p0;
	n_out26p0 = 1.000000;

// Output:0
	ALBEDO = n_out22p0;
	ALPHA = n_out6p0;
	METALLIC = n_out27p0;
	ROUGHNESS = n_out25p0;
	SPECULAR = n_out26p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 666.25, -214.25 )
flags/shadows_disabled = true
flags/unshaded = true
nodes/fragment/0/position = Vector2( 1380, -100 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -340, 280 )
nodes/fragment/3/node = SubResource( 22 )
nodes/fragment/3/position = Vector2( -620, 280 )
nodes/fragment/4/node = SubResource( 23 )
nodes/fragment/4/position = Vector2( -680, 400 )
nodes/fragment/5/node = SubResource( 24 )
nodes/fragment/5/position = Vector2( 180, -40 )
nodes/fragment/6/node = SubResource( 25 )
nodes/fragment/6/position = Vector2( 500, 200 )
nodes/fragment/7/node = SubResource( 26 )
nodes/fragment/7/position = Vector2( -660, 160 )
nodes/fragment/9/node = SubResource( 27 )
nodes/fragment/9/position = Vector2( -420, -240 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 360, -300 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( -280, -700 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -780, -600 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 140, -300 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -960, -460 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -500, -560 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -720, -500 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 180, -560 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -20, -760 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( -60, -520 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( 720, -180 )
nodes/fragment/23/node = SubResource( 17 )
nodes/fragment/23/position = Vector2( 160, 300 )
nodes/fragment/24/node = SubResource( 18 )
nodes/fragment/24/position = Vector2( -60, 340 )
nodes/fragment/25/node = SubResource( 19 )
nodes/fragment/25/position = Vector2( 820, -40 )
nodes/fragment/26/node = SubResource( 20 )
nodes/fragment/26/position = Vector2( 880, 200 )
nodes/fragment/27/node = SubResource( 21 )
nodes/fragment/27/position = Vector2( 860, 100 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 5, 1, 6, 0, 7, 0, 2, 3, 9, 0, 15, 0, 15, 0, 11, 0, 14, 0, 17, 0, 17, 0, 12, 0, 16, 0, 18, 0, 18, 0, 17, 1, 19, 0, 15, 1, 20, 0, 19, 1, 12, 0, 21, 0, 21, 0, 19, 0, 11, 0, 22, 0, 5, 0, 22, 1, 22, 0, 0, 0, 6, 0, 0, 1, 23, 0, 6, 1, 2, 0, 24, 0, 24, 0, 23, 0, 25, 0, 0, 3, 26, 0, 0, 4, 27, 0, 0, 2 )

[resource]
render_priority = 1
shader = SubResource( 28 )
shader_param/Distortion = 0.25
shader_param/Color = Color( 0.341176, 0.568627, 0.996078, 1 )
shader_param/FresnelPower = 4.0
