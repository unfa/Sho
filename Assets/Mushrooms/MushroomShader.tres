[gd_resource type="VisualShader" load_steps=49 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
output_port_for_preview = 0
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeFresnel" id=2]
default_input_values = [ 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 0.9

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.6

[sub_resource type="VisualShaderNodeScalarConstant" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 4.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 8.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=14]

[sub_resource type="VisualShaderNodeScalarOp" id=15]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 50.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=17]
default_input_values = [ 0, 0.0, 1, 100000.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 31

[sub_resource type="VisualShaderNodeColorOp" id=19]
operator = 4

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=20]
uniform_name = "TextureUniformTriplanar"

[sub_resource type="VisualShaderNodeScalarOp" id=21]

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 25.0 ]
operator = 2

[sub_resource type="VisualShaderNodeFresnel" id=23]
default_input_values = [ 2, true, 3, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=24]
default_input_values = [ 0, 0.0, 1, 0.8 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=25]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=26]
constant = 0.8

[sub_resource type="VisualShaderNodeVectorDecompose" id=27]

[sub_resource type="VisualShaderNodeScalarOp" id=28]

[sub_resource type="VisualShaderNodeScalarOp" id=29]
default_input_values = [ 0, 0.0, 1, 20.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=30]
function = 31

[sub_resource type="VisualShaderNodeScalarOp" id=31]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=33]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=34]

[sub_resource type="VisualShaderNodeVectorOp" id=35]

[sub_resource type="VisualShaderNodeScalarOp" id=36]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarFunc" id=38]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=39]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=40]

[sub_resource type="VisualShaderNodeScalarOp" id=41]
default_input_values = [ 0, 0.0, 1, 0.7 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=42]

[sub_resource type="VisualShaderNodeInput" id=43]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=44]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=45]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=46]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=47]
default_input_values = [ 0, 0.0, 1, 0.02 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=48]
input_name = "uv"

[resource]
resource_name = "MushroomShader"
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform vec4 ColorUniform : hint_color;
uniform sampler2D TextureUniformTriplanar;


// TRIPLANAR FUNCTION GLOBAL CODE
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// Input:4
	vec3 n_out4p0 = NORMAL;

// Input:6
	float n_out6p0 = TIME;

// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// VectorDecompose:10
	float n_out10p0 = n_out9p0.x;
	float n_out10p1 = n_out9p0.y;
	float n_out10p2 = n_out9p0.z;

// ScalarFunc:13
	float n_out13p0 = 1.0 - n_out10p0;

// ScalarOp:12
	float n_in12p1 = 20.00000;
	float n_out12p0 = n_out13p0 * n_in12p1;

// ScalarOp:11
	float n_out11p0 = n_out6p0 + n_out12p0;

// ScalarFunc:7
	float n_out7p0 = sin(n_out11p0);

// ScalarOp:14
	float n_in14p1 = 0.50000;
	float n_out14p0 = n_out7p0 + n_in14p1;

// ScalarOp:8
	float n_in8p1 = 0.02000;
	float n_out8p0 = n_out14p0 * n_in8p1;

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * vec3(n_out8p0);

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 + n_out5p0;

// Input:16
	vec3 n_out16p0 = vec3(UV, 0.0);

// VectorDecompose:17
	float n_out17p0 = n_out16p0.x;
	float n_out17p1 = n_out16p0.y;
	float n_out17p2 = n_out16p0.z;

// Input:15
	float n_out15p0 = TIME;

// ScalarOp:23
	float n_in23p1 = 0.70000;
	float n_out23p0 = n_out15p0 * n_in23p1;

// ScalarFunc:20
	float n_out20p0 = sin(n_out23p0);

// ScalarOp:19
	float n_out19p0 = n_out17p0 * n_out20p0;

// ScalarOp:21
	float n_in21p1 = 0.10000;
	float n_out21p0 = n_out19p0 * n_in21p1;

// VectorCompose:22
	float n_in22p1 = 0.00000;
	float n_in22p2 = 0.00000;
	vec3 n_out22p0 = vec3(n_out21p0, n_in22p1, n_in22p2);

// VectorOp:18
	vec3 n_out18p0 = n_out3p0 + n_out22p0;

// Output:0
	VERTEX = n_out18p0;

	// TRIPLANAR FUNCTION VERTEX CODE
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = ColorUniform.rgb;
	float n_out2p1 = ColorUniform.a;

// Fresnel:57
	bool n_in57p2 = true;
	float n_in57p3 = 0.50000;
	float n_out57p0 = n_in57p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in57p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in57p3));

// ScalarOp:58
	float n_in58p1 = 0.80000;
	float n_out58p0 = n_out57p0 * n_in58p1;

// Scalar:36
	float n_out36p0 = 0.600000;

// Fresnel:32
	bool n_in32p2 = false;
	float n_in32p3 = 2.00000;
	float n_out32p0 = n_in32p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in32p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in32p3));

// ScalarOp:38
	float n_in38p1 = 0.50000;
	float n_out38p0 = n_out32p0 + n_in38p1;

// ScalarOp:39
	float n_in39p1 = 0.60000;
	float n_out39p0 = n_out38p0 * n_in39p1;

// VectorOp:40
	vec3 n_out40p0 = vec3(n_out39p0) * n_out2p0;

// Input:41
	float n_out41p0 = TIME;

// Input:45
	vec3 n_out45p0 = vec3(UV, 0.0);

// VectorDecompose:46
	float n_out46p0 = n_out45p0.x;
	float n_out46p1 = n_out45p0.y;
	float n_out46p2 = n_out45p0.z;

// ScalarFunc:51
	float n_out51p0 = 1.0 - n_out46p0;

// ScalarOp:48
	float n_in48p1 = 50.00000;
	float n_out48p0 = n_out51p0 * n_in48p1;

// ScalarOp:47
	float n_out47p0 = n_out41p0 + n_out48p0;

// ScalarOp:49
	float n_in49p1 = 100000.00000;
	float n_out49p0 = n_out47p0 + n_in49p1;

// TextureUniformTriplanar:54
	vec3 n_out54p0;
	float n_out54p1;
	{
		vec4 n_tex_read = triplanar_texture( TextureUniformTriplanar, triplanar_power_normal, triplanar_pos );
		n_out54p0 = n_tex_read.rgb;
		n_out54p1 = n_tex_read.a;
	}

// ScalarOp:56
	float n_in56p1 = 25.00000;
	float n_out56p0 = dot(n_out54p0, vec3(0.333333, 0.333333, 0.333333)) * n_in56p1;

// ScalarOp:55
	float n_out55p0 = n_out49p0 + n_out56p0;

// ScalarFunc:42
	float n_out42p0 = sin(n_out55p0);

// ScalarOp:43
	float n_in43p1 = 4.00000;
	float n_out43p0 = n_out42p0 + n_in43p1;

// ScalarOp:44
	float n_in44p1 = 8.00000;
	float n_out44p0 = n_out43p0 / n_in44p1;

// ColorOp:52
	vec3 n_out52p0;
	{
		float base = n_out40p0.x;
		float blend = vec3(n_out44p0).x;
		if (base < 0.5) {
			n_out52p0.x = 2.0 * base * blend;
		} else {
			n_out52p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out40p0.y;
		float blend = vec3(n_out44p0).y;
		if (base < 0.5) {
			n_out52p0.y = 2.0 * base * blend;
		} else {
			n_out52p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out40p0.z;
		float blend = vec3(n_out44p0).z;
		if (base < 0.5) {
			n_out52p0.z = 2.0 * base * blend;
		} else {
			n_out52p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Scalar:60
	float n_out60p0 = 0.800000;

// VectorOp:59
	vec3 n_out59p0 = n_out52p0 * vec3(n_out60p0);

// Scalar:37
	float n_out37p0 = 0.000000;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out58p0;
	ROUGHNESS = n_out36p0;
	EMISSION = n_out59p0;
	TRANSMISSION = vec3(n_out37p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2189, -818.25 )
modes/cull = 2
nodes/vertex/0/position = Vector2( 1400, 180 )
nodes/vertex/2/node = SubResource( 37 )
nodes/vertex/2/position = Vector2( 300, -180 )
nodes/vertex/3/node = SubResource( 42 )
nodes/vertex/3/position = Vector2( 500, -40 )
nodes/vertex/4/node = SubResource( 43 )
nodes/vertex/4/position = Vector2( -100, -60 )
nodes/vertex/5/node = SubResource( 44 )
nodes/vertex/5/position = Vector2( 220, -40 )
nodes/vertex/6/node = SubResource( 45 )
nodes/vertex/6/position = Vector2( -880, 60 )
nodes/vertex/7/node = SubResource( 46 )
nodes/vertex/7/position = Vector2( -300, 60 )
nodes/vertex/8/node = SubResource( 47 )
nodes/vertex/8/position = Vector2( 0, 40 )
nodes/vertex/9/node = SubResource( 48 )
nodes/vertex/9/position = Vector2( -1260, 200 )
nodes/vertex/10/node = SubResource( 27 )
nodes/vertex/10/position = Vector2( -1100, 200 )
nodes/vertex/11/node = SubResource( 28 )
nodes/vertex/11/position = Vector2( -500, 120 )
nodes/vertex/12/node = SubResource( 29 )
nodes/vertex/12/position = Vector2( -700, 200 )
nodes/vertex/13/node = SubResource( 30 )
nodes/vertex/13/position = Vector2( -880, 200 )
nodes/vertex/14/node = SubResource( 31 )
nodes/vertex/14/position = Vector2( -160, 140 )
nodes/vertex/15/node = SubResource( 32 )
nodes/vertex/15/position = Vector2( -120, 600 )
nodes/vertex/16/node = SubResource( 33 )
nodes/vertex/16/position = Vector2( 100, 400 )
nodes/vertex/17/node = SubResource( 34 )
nodes/vertex/17/position = Vector2( 360, 360 )
nodes/vertex/18/node = SubResource( 35 )
nodes/vertex/18/position = Vector2( 1160, 180 )
nodes/vertex/19/node = SubResource( 36 )
nodes/vertex/19/position = Vector2( 620, 400 )
nodes/vertex/20/node = SubResource( 38 )
nodes/vertex/20/position = Vector2( 340, 520 )
nodes/vertex/21/node = SubResource( 39 )
nodes/vertex/21/position = Vector2( 780, 320 )
nodes/vertex/22/node = SubResource( 40 )
nodes/vertex/22/position = Vector2( 960, 260 )
nodes/vertex/23/node = SubResource( 41 )
nodes/vertex/23/position = Vector2( 100, 560 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 5, 0, 5, 0, 3, 1, 8, 0, 5, 1, 9, 0, 10, 0, 6, 0, 11, 0, 11, 0, 7, 0, 12, 0, 11, 1, 10, 0, 13, 0, 13, 0, 12, 0, 7, 0, 14, 0, 14, 0, 8, 0, 16, 0, 17, 0, 3, 0, 18, 0, 18, 0, 0, 0, 17, 0, 19, 0, 20, 0, 19, 1, 19, 0, 21, 0, 22, 0, 18, 1, 21, 0, 22, 0, 15, 0, 23, 0, 23, 0, 20, 0 )
nodes/fragment/0/position = Vector2( 3140, -600 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 1160, -540 )
nodes/fragment/32/node = SubResource( 2 )
nodes/fragment/32/position = Vector2( 1020, -840 )
nodes/fragment/35/node = SubResource( 3 )
nodes/fragment/35/position = Vector2( 1680, -480 )
nodes/fragment/36/node = SubResource( 4 )
nodes/fragment/36/position = Vector2( 1680, -360 )
nodes/fragment/37/node = SubResource( 5 )
nodes/fragment/37/position = Vector2( 1680, -240 )
nodes/fragment/38/node = SubResource( 6 )
nodes/fragment/38/position = Vector2( 1320, -840 )
nodes/fragment/39/node = SubResource( 7 )
nodes/fragment/39/position = Vector2( 1520, -820 )
nodes/fragment/40/node = SubResource( 8 )
nodes/fragment/40/position = Vector2( 1740, -660 )
nodes/fragment/41/node = SubResource( 9 )
nodes/fragment/41/position = Vector2( 1040, -1140 )
nodes/fragment/42/node = SubResource( 10 )
nodes/fragment/42/position = Vector2( 2200, -1140 )
nodes/fragment/43/node = SubResource( 11 )
nodes/fragment/43/position = Vector2( 2420, -1160 )
nodes/fragment/44/node = SubResource( 12 )
nodes/fragment/44/position = Vector2( 2640, -1140 )
nodes/fragment/45/node = SubResource( 13 )
nodes/fragment/45/position = Vector2( 540, -1300 )
nodes/fragment/46/node = SubResource( 14 )
nodes/fragment/46/position = Vector2( 780, -1300 )
nodes/fragment/47/node = SubResource( 15 )
nodes/fragment/47/position = Vector2( 1580, -1160 )
nodes/fragment/48/node = SubResource( 16 )
nodes/fragment/48/position = Vector2( 1240, -1300 )
nodes/fragment/49/node = SubResource( 17 )
nodes/fragment/49/position = Vector2( 1780, -1160 )
nodes/fragment/51/node = SubResource( 18 )
nodes/fragment/51/position = Vector2( 1020, -1340 )
nodes/fragment/52/node = SubResource( 19 )
nodes/fragment/52/position = Vector2( 2680, -760 )
nodes/fragment/54/node = SubResource( 20 )
nodes/fragment/54/position = Vector2( 1260, -1540 )
nodes/fragment/55/node = SubResource( 21 )
nodes/fragment/55/position = Vector2( 2000, -1160 )
nodes/fragment/56/node = SubResource( 22 )
nodes/fragment/56/position = Vector2( 1880, -1400 )
nodes/fragment/57/node = SubResource( 23 )
nodes/fragment/57/position = Vector2( 2420, -380 )
nodes/fragment/58/node = SubResource( 24 )
nodes/fragment/58/position = Vector2( 2800, -380 )
nodes/fragment/59/node = SubResource( 25 )
nodes/fragment/59/position = Vector2( 2943, -737.25 )
nodes/fragment/60/node = SubResource( 26 )
nodes/fragment/60/position = Vector2( 2660, -640 )
nodes/fragment/connections = PoolIntArray( 36, 0, 0, 3, 37, 0, 0, 17, 32, 0, 38, 0, 38, 0, 39, 0, 39, 0, 40, 0, 2, 0, 40, 1, 2, 0, 0, 0, 42, 0, 43, 0, 43, 0, 44, 0, 45, 0, 46, 0, 41, 0, 47, 0, 48, 0, 47, 1, 47, 0, 49, 0, 46, 0, 51, 0, 51, 0, 48, 0, 40, 0, 52, 0, 44, 0, 52, 1, 49, 0, 55, 0, 55, 0, 42, 0, 56, 0, 55, 1, 54, 0, 56, 0, 57, 0, 58, 0, 58, 0, 0, 1, 52, 0, 59, 0, 59, 0, 0, 5, 60, 0, 59, 1 )
