[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://Assets/Materials/NoisyMaterials/GrayscaleNoise.tres" type="Texture" id=1]
[ext_resource path="res://Assets/Materials/NoisyMaterials/NormalNoise.tres" type="Texture" id=2]

[sub_resource type="VisualShaderNodeColorFunc" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.25 ]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 7

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.9 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 2 )
texture_type = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "NormalDepth"

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 6

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=10]
uniform_name = "TextureUniformTriplanar"
color_default = 1

[sub_resource type="VisualShaderNodeColorUniform" id=11]
uniform_name = "BaseColor"

[sub_resource type="VisualShaderNodeColorOp" id=12]
operator = 4

[sub_resource type="VisualShaderNodeVectorInterp" id=13]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ), 2, Vector3( 1, 0, 1 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=14]
uniform_name = "NoiseBlend"

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Roughness"

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Rim"

[resource]
code = "shader_type spatial;
render_mode world_vertex_coords;

uniform vec4 BaseColor : hint_color;
uniform sampler2D TextureUniformTriplanar : hint_black;
uniform sampler2D tex_frg_15;
uniform vec4 NoiseBlend : hint_color;
uniform float Roughness;
uniform sampler2D tex_frg_16 : hint_normal;
uniform float NormalDepth;
uniform float Rim;


// TRIPLANAR FUNCTION GLOBAL CODE
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// Output:0

	// TRIPLANAR FUNCTION VERTEX CODE
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = BaseColor.rgb;
	float n_out3p1 = BaseColor.a;

// TextureUniformTriplanar:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = triplanar_texture( TextureUniformTriplanar, triplanar_power_normal, triplanar_pos );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Texture:15
	vec4 tex_frg_15_read = texture(tex_frg_15, n_out2p0.xy);
	vec3 n_out15p0 = tex_frg_15_read.rgb;
	float n_out15p1 = tex_frg_15_read.a;

// ColorUniform:6
	vec3 n_out6p0 = NoiseBlend.rgb;
	float n_out6p1 = NoiseBlend.a;

// VectorOp:7
	vec3 n_in7p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out7p0 = n_in7p0 - n_out6p0;

// VectorMix:5
	vec3 n_in5p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out5p0 = mix(n_out15p0, n_in5p1, n_out7p0);

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out3p0.x;
		float blend = n_out5p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out5p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out5p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ScalarUniform:8
	float n_out8p0 = Roughness;

// ColorFunc:10
	vec3 n_out10p0;
	{
		vec3 c = n_out15p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out10p0 = vec3(max3, max3, max3);
	}

// ScalarOp:11
	float n_out11p0 = n_out8p0 * dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:12
	float n_in12p1 = 0.25000;
	float n_out12p0 = n_out11p0 + n_in12p1;

// ScalarOp:14
	float n_in14p1 = 0.90000;
	float n_out14p0 = n_out12p0 * n_in14p1;

// ScalarOp:13
	float n_in13p1 = 1.00000;
	float n_out13p0 = min(n_out14p0, n_in13p1);

// ScalarOp:18
	float n_in18p1 = 0.60000;
	float n_out18p0 = max(n_out13p0, n_in18p1);

// Texture:16
	vec4 tex_frg_16_read = texture(tex_frg_16, n_out2p0.xy);
	vec3 n_out16p0 = tex_frg_16_read.rgb;
	float n_out16p1 = tex_frg_16_read.a;

// ScalarUniform:17
	float n_out17p0 = NormalDepth;

// ScalarUniform:9
	float n_out9p0 = Rim;

// Output:0
	ALBEDO = n_out4p0;
	ROUGHNESS = n_out18p0;
	NORMALMAP = n_out16p0;
	NORMALMAP_DEPTH = n_out17p0;
	RIM = n_out9p0;

}

void light() {
// Output:0

}
"
flags/world_vertex_coords = true
nodes/fragment/0/position = Vector2( 1420, 120 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -1580, 460 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( -280, -100 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( 60, 80 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( -120, 200 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( -820, 100 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( -500, 100 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( 60, 260 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 1020, 560 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 0, 440 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 320, 240 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 480, 240 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 820, 240 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 640, 240 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -860, 300 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 440, 440 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 1020, 480 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 1000, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 4, 1, 6, 0, 7, 1, 7, 0, 5, 2, 8, 0, 11, 0, 10, 0, 11, 1, 11, 0, 12, 0, 12, 0, 14, 0, 14, 0, 13, 0, 15, 0, 10, 0, 15, 0, 5, 0, 2, 0, 15, 0, 2, 0, 16, 0, 17, 0, 0, 9, 13, 0, 18, 0, 18, 0, 0, 3, 4, 0, 0, 0, 9, 0, 0, 10, 16, 0, 0, 8 )
